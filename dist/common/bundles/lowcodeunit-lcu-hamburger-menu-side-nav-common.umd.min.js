!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/material/sidenav"),require("@angular/cdk/layout"),require("rxjs"),require("rxjs/operators"),require("@angular/flex-layout"),require("@lcu/common"),require("@angular/material/icon")):"function"==typeof define&&define.amd?define("@lowcodeunit/lcu-hamburger-menu-side-nav-common",["exports","@angular/core","@angular/common","@angular/material/sidenav","@angular/cdk/layout","rxjs","rxjs/operators","@angular/flex-layout","@lcu/common","@angular/material/icon"],e):e(((t=t||self).lowcodeunit=t.lowcodeunit||{},t.lowcodeunit["lcu-hamburger-menu-side-nav-common"]={}),t.ng.core,t.ng.common,t.ng.material.sidenav,t.ng.cdk.layout,t.rxjs,t.rxjs.operators,t.ng["flex-layout"],t.common$1,t.ng.material.icon)}(this,(function(t,e,n,o,r,i,a,u,s,d){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */function c(t,e,n,o){var r,i=arguments.length,a=i<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,n):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,o);else for(var u=t.length-1;u>=0;u--)(r=t[u])&&(a=(i<3?r(a):i>3?r(e,n,a):r(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a}function l(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}var p=function(){function t(t){this.breakpointObserver=t,this.isHandset$=this.breakpointObserver.observe(r.Breakpoints.Handset).pipe(a.map((function(t){return t.matches}))),this.NavItemClicked=new e.EventEmitter,this.openedSubject=new i.Subject,this.MatContentWidth="50px",this.MatContentHeight="40px",this.MatContainerWidth="50px"}return t.prototype.ngOnInit=function(){this.setDefaultStyles()},t.prototype.ngAfterContentInit=function(){var t=this;this.openedSubject.subscribe((function(e){t.sidenav[e?"open":"close"](),t.setStyles()}))},t.prototype.ButtonClicked=function(t){this.NavItemClicked.emit(t)},t.prototype.toggleDrawer=function(){this.openedSubject.next(!this.sidenav.opened),this.sidenav.opened?(this.MatContentWidth="0px",this.MatContentHeight="94vh",this.MatContainerWidth="230px"):(this.MatContentWidth="50px",this.MatContainerWidth="50px",this.MatContentHeight="40px")},t.prototype.OnHover=function(){this.MenuBGColor=this.HoverMenuColor},t.prototype.OnButtonHover=function(){this.ButtonHover=!0},t.prototype.LeaveHover=function(){this.MenuBGColor=this.MenuColor},t.prototype.LeaveButtonHover=function(){this.ButtonHover=!1},t.prototype.setStyles=function(){this.MatContentWidth="50px",this.MatContainerWidth="50px",this.MatContentHeight="40px"},t.prototype.setDefaultStyles=function(){this.setStyles(),this.FontColor||(this.FontColor="black"),this.FontFamily||(this.FontFamily="'Montserrat', sans-serif"),this.FontWeight||(this.FontWeight="bold"),this.FontSize||(this.FontSize="20px"),this.ButtonBackgroundColorHover||(this.ButtonBackgroundColorHover="grey"),this.ButtonBackgroundColor||(this.ButtonBackgroundColor="white"),this.ButtonBorder||(this.ButtonBorder="none"),this.ButtonTextPadding||(this.ButtonTextPadding="0px 0px 0px 30px"),this.MenuColor||(this.MenuBGColor="black"),this.MenuBGColor=this.MenuColor,this.HoverMenuColor||(this.HoverMenuColor="grey")},t.ctorParameters=function(){return[{type:r.BreakpointObserver}]},c([e.Output("nav-item-clicked"),l("design:type",e.EventEmitter)],t.prototype,"NavItemClicked",void 0),c([e.Input("menu-items"),l("design:type",Array)],t.prototype,"MenuItems",void 0),c([e.Input("opened-subject"),l("design:type",i.Subject)],t.prototype,"openedSubject",void 0),c([e.Input("font-family"),l("design:type",String)],t.prototype,"FontFamily",void 0),c([e.Input("font-weight"),l("design:type",String)],t.prototype,"FontWeight",void 0),c([e.Input("font-size"),l("design:type",String)],t.prototype,"FontSize",void 0),c([e.Input("menu-color"),l("design:type",String)],t.prototype,"MenuColor",void 0),c([e.Input("hover-menu-color"),l("design:type",String)],t.prototype,"HoverMenuColor",void 0),c([e.Input("mat-content-width"),l("design:type",String)],t.prototype,"MatContentWidth",void 0),c([e.Input("mat-content-height"),l("design:type",String)],t.prototype,"MatContentHeight",void 0),c([e.Input("mat-container-width"),l("design:type",String)],t.prototype,"MatContainerWidth",void 0),c([e.Input("button-border"),l("design:type",String)],t.prototype,"ButtonBorder",void 0),c([e.Input("button-background-color"),l("design:type",String)],t.prototype,"ButtonBackgroundColor",void 0),c([e.Input("button-background-color-hover"),l("design:type",String)],t.prototype,"ButtonBackgroundColorHover",void 0),c([e.Input("button-text-padding"),l("design:type",String)],t.prototype,"ButtonTextPadding",void 0),c([e.Input("font-color"),l("design:type",String)],t.prototype,"FontColor",void 0),c([e.ViewChild("sidenav",{static:!1}),l("design:type",o.MatSidenav)],t.prototype,"sidenav",void 0),t=c([e.Component({selector:"lcu-side-nav",template:'<mat-sidenav-container  class="mat-sidenav-container" [hasBackdrop]="false" [ngStyle]="{width: MatContainerWidth}">\r\n  <mat-sidenav-content class="mat-sidenav-content" [ngStyle]="{width: MatContentWidth, height: MatContentHeight}">\r\n    <button  class="hamburger-menu" mat-icon-button (click)="toggleDrawer()" >\r\n      <mat-icon [inline]="true" (mouseover)="OnHover()" (mouseleave)="LeaveHover()"[ngStyle]="{\'color\':MenuBGColor}" >menu</mat-icon>\r\n    </button>\r\n  </mat-sidenav-content>\r\n  \x3c!-- Builds the hamburger menu from the items in the constants.ts file--\x3e\r\n  <mat-sidenav class="side-nav" #sidenav mode="side" (click)="toggleDrawer()">\r\n    <button class="hamburger-menu" mat-icon-button>\r\n      <mat-icon [inline]="true" (mouseover)="OnHover()" (mouseleave)="LeaveHover()"[ngStyle]="{\'color\':MenuBGColor}">menu</mat-icon>\r\n    </button>\r\n    \x3c!--  --\x3e\r\n    <div class="button-container" fxLayout="column" fxLayoutAlign="space-between">\r\n        \x3c!-- [ngStyle]="setButtonStyles()" (mouseover)="OnButtonHover()" (mouseleave)="LeaveButtonHover()" --\x3e\r\n      <button class="item-button" mat-menu-item fxLayoutAlign="start center" \r\n      [ngStyle]="{\'color\':FontColor, \'border\': ButtonBorder}"\r\n      *ngFor="let item of MenuItems"\r\n        [disabled]=item.Disabled (click)="ButtonClicked(item)" >\r\n        <div [attr.id]="\'button-\' + item.Label" fxLayoutAlign="start center" >\r\n        <mat-icon class="button-icon material-icons material-icons-outlined" *ngIf="item.Icon">{{ item.Icon }}</mat-icon>\r\n        <span class="button-title" \r\n        [ngStyle]="{\'font-family\': FontFamily, \r\n                    \'font-weight\': FontWeight, \r\n                    \'padding\': ButtonTextPadding, \r\n                    \'font-size\': FontSize }">{{ item.Label }}</span>\r\n      </div>\r\n      \x3c!-- <div class="button-border"></div> --\x3e\r\n      </button>\r\n      \r\n    </div>\r\n    \r\n  </mat-sidenav>\r\n</mat-sidenav-container>',styles:[".hamburger-menu{background-color:transparent;border-width:0;outline:0;font-size:30px;margin-left:15px;margin-bottom:2px}.mat-sidenav-container{z-index:2;background-color:transparent}::ng-deep .mat-sidenav-container .mat-drawer-inner-container{z-index:10!important;background-color:transparent!important;overflow:hidden!important}.mat-sidenav-content{background-color:transparent;overflow:hidden}.side-nav{height:100vh;width:230px;background-color:transparent;border-right:transparent;overflow:hidden}.button-container{background-color:transparent;z-index:10;width:100%}.button-container .item-button{height:40px;width:100%;font-size:20px;background-color:#fff}.button-container .item-button .button-icon{padding-left:17px}.button-container .item-button:last-child{border-bottom:none}.button-container .item-button:hover{background-color:#f4f4f3;cursor:pointer}"]}),l("design:paramtypes",[r.BreakpointObserver])],t)}(),m=function(){function t(){}return t=c([e.NgModule({declarations:[p],imports:[n.CommonModule,u.FlexLayoutModule,s.FathymSharedModule,s.MaterialModule,o.MatSidenavModule,d.MatIconModule],exports:[p],entryComponents:[p]})],t)}(),h=function(t,e,n,o,r){this.Icon=n,this.Label=t,this.Url=e,this.Param=o,this.Disabled=r};t.LcuHamburgerMenuSideNavModule=m,t.NavLinkModel=h,t.SideNavComponent=p,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=lowcodeunit-lcu-hamburger-menu-side-nav-common.umd.min.js.map