{"version":3,"sources":["ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/controls/side-nav/side-nav.component.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/lcu-hamburger-menu-side-nav.module.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/models/nav-link.model.ts"],"names":["SideNavComponent","breakpointObserver","this","isHandset$","observe","Breakpoints","Handset","pipe","map","result","matches","openedSubject","Subject","MatContentWidth","MatContentHeight","MatContainerWidth","prototype","ngOnInit","setDefaultStyles","ngAfterContentInit","_this","subscribe","sidenav","setStyles","toggleDrawer","next","opened","OnHover","MenuColor","HoverColor","LeaveHover","Color","Component","args","selector","template","BreakpointObserver","Input","ViewChild","static","LcuHamburgerMenuSideNavModule","NgModule","declarations","imports","CommonModule","FlexLayoutModule","FathymSharedModule","MaterialModule","MatSidenavModule","MatIconModule","exports","entryComponents","label","Url","icon","param","disabled","Icon","Label","Param","Disabled"],"mappings":"wxBAAA,IAAAA,EAAA,WAiDE,SAAAA,EAAsBC,GAAAC,KAAAD,mBAAAA,EAjCtBC,KAAAC,WAAkCD,KAAKD,mBAAmBG,QAAQC,EAAAA,YAAYC,SAC3EC,KACCC,EAAAA,KAAG,SAACC,GAAU,OAAAA,EAAOC,YAgCxBR,KAAKS,cAAgB,IAAIC,EAAAA,QACzBV,KAAKW,gBAAkB,OACvBX,KAAKY,iBAAmB,OACxBZ,KAAKa,kBAAmB,OAuD3B,OApDSf,EAAAgB,UAAAC,SAAP,WACEf,KAAKgB,oBAGPlB,EAAAgB,UAAAG,mBAAA,WAAA,IAAAC,EAAAlB,KACEA,KAAKS,cAAcU,WAAS,SAAEZ,GAC5BW,EAAKE,QAAQb,EAAS,OAAQ,WAC9BW,EAAKG,gBAKFvB,EAAAgB,UAAAQ,aAAP,WACEtB,KAAKS,cAAcc,MAAMvB,KAAKoB,QAAQI,QAClCxB,KAAKoB,QAAQI,QAOjBxB,KAAKW,gBAAkB,MACvBX,KAAKY,iBAAmB,OACxBZ,KAAKa,kBAAoB,UARzBb,KAAKW,gBAAkB,OACvBX,KAAKa,kBAAoB,OACzBb,KAAKY,iBAAmB,SAWnBd,EAAAgB,UAAAW,QAAP,WACEzB,KAAK0B,UAAY1B,KAAK2B,YAGjB7B,EAAAgB,UAAAc,WAAP,WACE5B,KAAK0B,UAAY1B,KAAK6B,OAEd/B,EAAAgB,UAAAO,UAAV,WACErB,KAAKW,gBAAkB,OACvBX,KAAKa,kBAAoB,OACzBb,KAAKY,iBAAmB,QAGhBd,EAAAgB,UAAAE,iBAAV,WACEhB,KAAKqB,YAEDrB,KAAK6B,QACP7B,KAAK6B,MAAQ,SAEf7B,KAAK0B,UAAY1B,KAAK6B,MAClB7B,KAAK2B,aACP3B,KAAK2B,WAAa,6BAjGvBG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAA,4lEATOC,EAAAA,yDAsBNC,EAAAA,MAAKJ,KAAA,CAAC,qCAINI,EAAAA,MAAKJ,KAAA,CAAC,iCAGNI,EAAAA,MAAKJ,KAAA,CAAC,6BAGNI,EAAAA,MAAKJ,KAAA,CAAC,wCAGNI,EAAAA,MAAKJ,KAAA,CAAC,+CAGNI,EAAAA,MAAKJ,KAAA,CAAC,iDAGNI,EAAAA,MAAKJ,KAAA,CAAC,wCAGNK,EAAAA,UAASL,KAAA,CAAC,UAAU,CAACM,QAAQ,OA+DhCvC,EA5GA,GCAA,IAAAwC,EAAA,WAOA,SAAAA,KAa6C,2BAb5CC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAAC1C,GACf2C,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,iBACAC,EAAAA,eAEFC,QAAS,CAAClD,GACVmD,gBAAgB,CAACnD,OAE0BwC,EApB7C,KC8BI,SAAYY,EAAeC,EAAaC,EAAeC,EAAgBC,GACnEtD,KAAKuD,KAAOH,EACZpD,KAAKwD,MAAQN,EACblD,KAAKmD,IAAMA,EACXnD,KAAKyD,MAAQJ,EACbrD,KAAK0D,SAAWJ","sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NavLinkModel } from '../../models/nav-link.model';\r\nimport { MatSidenav } from '@angular/material';\r\n\r\n\r\n@Component({\r\n  selector: 'lcu-side-nav',\r\n  templateUrl: './side-nav.component.html',\r\n  styleUrls: ['./side-nav.component.scss']\r\n})\r\n\r\nexport class SideNavComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  protected _navLinks: Array<NavLinkModel>;\r\n  \r\n  @Input('menu-items') \r\n  public MenuItems: Array<NavLinkModel>;\r\n\r\n  //public openedSubject: Subject<boolean>;\r\n  @Input('opened-subject') \r\n  public openedSubject: Subject<boolean>\r\n\r\n  @Input('color')\r\n  public Color: string;\r\n\r\n  @Input('hover-color')\r\n  public HoverColor: string;\r\n  \r\n  @Input('mat-content-width')\r\n  public MatContentWidth: string;\r\n\r\n  @Input('mat-content-height')\r\n  public MatContentHeight: string;\r\n\r\n  @Input('mat-container-width')\r\n  public MatContainerWidth: string;\r\n\r\n  @ViewChild('sidenav',{static: false}) public sidenav: MatSidenav;\r\n\r\n  public MenuColor: string;\r\n\r\n  constructor(protected breakpointObserver: BreakpointObserver) {\r\n   this.openedSubject = new Subject<boolean>();\r\n   this.MatContentWidth = \"40px\";\r\n   this.MatContentHeight = \"40px\";\r\n   this.MatContainerWidth= \"40px\";\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.setDefaultStyles();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.openedSubject.subscribe((result: boolean)=>{\r\n      this.sidenav[result ? 'open': 'close']()\r\n      this.setStyles();\r\n    });\r\n  }\r\n\r\n\r\n  public toggleDrawer() {\r\n    this.openedSubject.next(!this.sidenav.opened);\r\n    if(!this.sidenav.opened){\r\n    this.MatContentWidth = \"40px\";\r\n    this.MatContainerWidth = \"40px\";\r\n    this.MatContentHeight = \"40px\";\r\n    // console.log(\"sidenav closed\", this.MatContentWidth);\r\n  }\r\n  else{\r\n    this.MatContentWidth = \"0px\";\r\n    this.MatContentHeight = \"94vh\";//94vh\r\n    this.MatContainerWidth = \"210px\";\r\n    // console.log(\"sidenav open\", this.MatContentWidth);\r\n\r\n  }\r\n  }\r\n  public OnHover():void{\r\n    this.MenuColor = this.HoverColor;\r\n  }\r\n\r\n  public LeaveHover(): void{\r\n    this.MenuColor = this.Color;\r\n  }\r\n  protected setStyles():void{\r\n    this.MatContentWidth = \"40px\";\r\n    this.MatContainerWidth = \"40px\";\r\n    this.MatContentHeight = \"40px\";\r\n  }\r\n\r\n  protected setDefaultStyles(): void{\r\n    this.setStyles();\r\n    \r\n    if(!this.Color){\r\n      this.Color = 'black';\r\n    }\r\n    this.MenuColor = this.Color;\r\n    if(!this.HoverColor){\r\n      this.HoverColor = 'grey';\r\n    }\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SideNavComponent } from './controls/side-nav/side-nav.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FathymSharedModule, MaterialModule } from '@lcu/common';\r\nimport { MatSidenavModule, MatIconModule } from '@angular/material';\r\n\r\n@NgModule({\r\n  declarations: [SideNavComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    FathymSharedModule,\r\n    MaterialModule,\r\n    MatSidenavModule,\r\n    MatIconModule\r\n  ],\r\n  exports: [SideNavComponent],\r\n  entryComponents:[SideNavComponent]\r\n})\r\nexport class LcuHamburgerMenuSideNavModule { }\r\n","/**\r\n * Model for naviation link structure\r\n */\r\nexport class NavLinkModel {\r\n\r\n    /**\r\n     * Menu icon\r\n     */\r\n    public Icon?: string;\r\n\r\n    /**\r\n     * Menu label\r\n     */\r\n    public Label: string;\r\n\r\n    /**\r\n     * Menu parameter\r\n     */\r\n    public Param?: string;\r\n\r\n    /**\r\n     * Navigation URL\r\n     */\r\n    public Url: string;\r\n\r\n    /**\r\n     * String value true or false, whether or not to grey out the button\r\n     */\r\n    public Disabled: string;\r\n\r\n    constructor(label: string, Url: string, icon?: string, param?: string, disabled?: string) {\r\n        this.Icon = icon;\r\n        this.Label = label;\r\n        this.Url = Url;\r\n        this.Param = param;\r\n        this.Disabled = disabled;\r\n    }\r\n}"]}