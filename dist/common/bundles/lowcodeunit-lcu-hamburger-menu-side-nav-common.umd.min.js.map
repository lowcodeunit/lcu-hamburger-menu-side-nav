{"version":3,"sources":["ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/controls/side-nav/side-nav.component.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/lcu-hamburger-menu-side-nav.module.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/models/nav-link.model.ts"],"names":["SideNavComponent","prototype","ngOnInit","ngAfterContentInit","_this","this","openedSubject","subscribe","keepOpen","sidenav","toggleDrawer","next","opened","SideOpen","setTimeout","Component","args","selector","template","BreakpointObserver","Input","ViewChild","breakpointObserver","isHandset$","observe","Breakpoints","Handset","pipe","map","result","matches","Subject","LcuHamburgerMenuSideNavModule","NgModule","declarations","imports","CommonModule","FlexLayoutModule","FathymSharedModule","MaterialModule","MatSidenavModule","MatIconModule","exports","entryComponents","label","Url","icon","param","disabled","Icon","Label","Param","Disabled"],"mappings":"qxBAAA,IAAAA,GAwCSA,EAAAC,UAAAC,SAAP,aAIAF,EAAAC,UAAAE,mBAAA,WAAA,IAAAC,EAAAC,KACEA,KAAKC,cAAcC,UAAS,SAC1BC,GAAY,OAAAJ,EAAKK,QAAQD,EAAW,OAAS,cAK1CR,EAAAC,UAAAS,aAAP,WAAA,IAAAN,EAAAC,KACEA,KAAKC,cAAcK,MAAMN,KAAKI,QAAQG,SAEjB,IAAlBP,KAAKQ,SACRC,WAAU,WACRV,EAAKS,UAAYT,EAAKS,UACtB,KAGFR,KAAKQ,UAAYR,KAAKQ,8BApDzBE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAA,i1DATOC,EAAAA,yDAsBNC,EAAAA,MAAKJ,KAAA,CAAC,qCAGNI,EAAAA,MAAKJ,KAAA,CAAC,mCAKNK,EAAAA,UAASL,KAAA,CAAC,cAiCbhB,GA7BE,SAAAA,EAAsBsB,GAAAjB,KAAAiB,mBAAAA,EAnBtBjB,KAAAkB,WAAkClB,KAAKiB,mBAAmBE,QAAQC,EAAAA,YAAYC,SAC3EC,KACCC,EAAAA,IAAG,SAACC,GAAU,OAAAA,EAAOC,WAkBxBzB,KAAKC,cAAgB,IAAIyB,EAAAA,QACzB1B,KAAKQ,UAAW,ECrCnB,IAAAmB,uBAOCC,EAAAA,SAAQjB,KAAA,CAAC,CACRkB,aAAc,CAAClC,GACfmC,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,iBACAC,EAAAA,eAEFC,QAAS,CAAC1C,GACV2C,gBAAgB,CAAC3C,OAE0BgC,GAb7C,SAAAA,KCuBI,WAAYY,EAAeC,EAAaC,EAAeC,EAAgBC,GACnE3C,KAAK4C,KAAOH,EACZzC,KAAK6C,MAAQN,EACbvC,KAAKwC,IAAMA,EACXxC,KAAK8C,MAAQJ,EACb1C,KAAK+C,SAAWJ","sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NavLinkModel } from '../../models/nav-link.model';\r\nimport { MatSidenav } from '@angular/material';\r\n\r\n\r\n@Component({\r\n  selector: 'lcu-side-nav',\r\n  templateUrl: './side-nav.component.html',\r\n  styleUrls: ['./side-nav.component.scss']\r\n})\r\n\r\nexport class SideNavComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  protected _navLinks: Array<NavLinkModel>;\r\n  \r\n  @Input('menu-items') \r\n  MenuItems: Array<NavLinkModel>;\r\n\r\n  @Input('opened-subject') \r\n  public openedSubject: Subject<boolean>;\r\n\r\n  public SideOpen: boolean;\r\n\r\n  @ViewChild('sidenav') public sidenav: MatSidenav;\r\n  // @ViewChild('sidenav', { static: true })public sidenav: MatSidenav;\r\n\r\n\r\n  constructor(protected breakpointObserver: BreakpointObserver) {\r\n   this.openedSubject = new Subject<boolean>();\r\n   this.SideOpen = false;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.openedSubject.subscribe(\r\n      keepOpen => this.sidenav[keepOpen ? 'open' : 'close']()\r\n    );\r\n  }\r\n\r\n\r\n  public toggleDrawer() {\r\n    this.openedSubject.next(!this.sidenav.opened);\r\n    //so the hamburger menu doesnt come all the way across the screen when closing the menu\r\n    if(this.SideOpen === true){\r\n    setTimeout(()=>{\r\n      this.SideOpen = !this.SideOpen;\r\n    },100);\r\n  }\r\n  else{\r\n    this.SideOpen = !this.SideOpen;\r\n  }\r\n  }\r\n\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SideNavComponent } from './controls/side-nav/side-nav.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FathymSharedModule, MaterialModule } from '@lcu-ide/common';\r\nimport { MatSidenavModule, MatIconModule } from '@angular/material';\r\n\r\n@NgModule({\r\n  declarations: [SideNavComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    FathymSharedModule,\r\n    MaterialModule,\r\n    MatSidenavModule,\r\n    MatIconModule\r\n  ],\r\n  exports: [SideNavComponent],\r\n  entryComponents:[SideNavComponent]\r\n})\r\nexport class LcuHamburgerMenuSideNavModule { }\r\n","/**\r\n * Model for naviation link structure\r\n */\r\nexport class NavLinkModel {\r\n\r\n    /**\r\n     * Menu icon\r\n     */\r\n    public Icon?: string;\r\n\r\n    /**\r\n     * Menu label\r\n     */\r\n    public Label: string;\r\n\r\n    /**\r\n     * Menu parameter\r\n     */\r\n    public Param?: string;\r\n\r\n    /**\r\n     * Navigation URL\r\n     */\r\n    public Url: string;\r\n\r\n    /**\r\n     * String value true or false, whether or not to grey out the button\r\n     */\r\n    public Disabled: string;\r\n\r\n    constructor(label: string, Url: string, icon?: string, param?: string, disabled?: string) {\r\n        this.Icon = icon;\r\n        this.Label = label;\r\n        this.Url = Url;\r\n        this.Param = param;\r\n        this.Disabled = disabled;\r\n    }\r\n}"]}