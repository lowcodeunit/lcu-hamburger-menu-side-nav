{"version":3,"sources":["ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/controls/side-nav/side-nav.component.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/lcu-hamburger-menu-side-nav.module.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/models/nav-link.model.ts"],"names":["SideNavComponent","breakpointObserver","this","isHandset$","observe","Breakpoints","Handset","pipe","map","result","matches","openedSubject","Subject","MatContentWidth","MatContentHeight","MatContainerWidth","Object","defineProperty","prototype","value","console","log","ngOnInit","ngAfterContentInit","_this","subscribe","sidenav","setStyles","toggleDrawer","next","opened","Component","args","selector","template","BreakpointObserver","Input","ViewChild","static","LcuHamburgerMenuSideNavModule","NgModule","declarations","imports","CommonModule","FlexLayoutModule","FathymSharedModule","MaterialModule","MatSidenavModule","MatIconModule","exports","entryComponents","label","Url","icon","param","disabled","Icon","Label","Param","Disabled"],"mappings":"+xBAAA,IAAAA,EAAA,WA2CE,SAAAA,EAAsBC,GAAAC,KAAAD,mBAAAA,EA3BtBC,KAAAC,WAAkCD,KAAKD,mBAAmBG,QAAQC,EAAAA,YAAYC,SAC3EC,KACCC,EAAAA,IAAG,SAACC,GAAU,OAAAA,EAAOC,WA0BxBR,KAAKS,cAAgB,IAAIC,EAAAA,QAEzBV,KAAKW,gBAAkB,OACvBX,KAAKY,iBAAmB,OACxBZ,KAAKa,kBAAmB,OAyC3B,OA9DEC,OAAAC,eACWjB,EAAAkB,UAAA,gBAAa,KADxB,SACyBC,GACvBjB,KAAKS,cAAgBQ,EACrBC,QAAQC,IAAI,iBAAkBnB,KAAKW,kDAqB9Bb,EAAAkB,UAAAI,SAAP,aAIAtB,EAAAkB,UAAAK,mBAAA,WAAA,IAAAC,EAAAtB,KAIEA,KAAKS,cAAcc,UAAS,SAAEhB,GAC5Be,EAAKE,QAAQjB,EAAS,OAAQ,WAC9Be,EAAKG,eAMF3B,EAAAkB,UAAAU,aAAP,WACE1B,KAAKS,cAAckB,MAAM3B,KAAKwB,QAAQI,QAElC5B,KAAKwB,QAAQI,QAOjB5B,KAAKW,gBAAkB,MACvBX,KAAKY,iBAAmB,QACxBZ,KAAKa,kBAAoB,UARzBb,KAAKW,gBAAkB,OACvBX,KAAKa,kBAAoB,OACzBb,KAAKY,iBAAmB,SAWhBd,EAAAkB,UAAAS,UAAV,WACEzB,KAAKW,gBAAkB,OACvBX,KAAKa,kBAAoB,OACzBb,KAAKY,iBAAmB,4BA/E3BiB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAA,m3DATOC,EAAAA,yDAsBNC,EAAAA,MAAKJ,KAAA,CAAC,qCAINI,EAAAA,MAAKJ,KAAA,CAAC,mCAYNK,EAAAA,UAASL,KAAA,CAAC,UAAU,CAACM,UAAQ,OAkDhCtC,EAzFA,GCAAuC,EAAA,WAOA,SAAAA,KAa6C,2BAb5CC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAACzC,GACf0C,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,iBACAC,EAAAA,eAEFC,QAAS,CAACjD,GACVkD,gBAAgB,CAAClD,OAE0BuC,EApB7C,KC8BI,SAAYY,EAAeC,EAAaC,EAAeC,EAAgBC,GACnErD,KAAKsD,KAAOH,EACZnD,KAAKuD,MAAQN,EACbjD,KAAKkD,IAAMA,EACXlD,KAAKwD,MAAQJ,EACbpD,KAAKyD,SAAWJ","sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NavLinkModel } from '../../models/nav-link.model';\r\nimport { MatSidenav } from '@angular/material';\r\n\r\n\r\n@Component({\r\n  selector: 'lcu-side-nav',\r\n  templateUrl: './side-nav.component.html',\r\n  styleUrls: ['./side-nav.component.scss']\r\n})\r\n\r\nexport class SideNavComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  protected _navLinks: Array<NavLinkModel>;\r\n  \r\n  @Input('menu-items') \r\n  public MenuItems: Array<NavLinkModel>;\r\n\r\n  public openedSubject: Subject<boolean>;\r\n  @Input('opened-subject') \r\n  public set OpenedSubject(value: Subject<boolean>){\r\n    this.openedSubject = value;\r\n    console.log(\"contentWidth: \", this.MatContentWidth);\r\n  }\r\n\r\n  public MatContentWidth: string;\r\n\r\n  public MatContentHeight: string;\r\n\r\n  public MatContainerWidth: string;\r\n\r\n  @ViewChild('sidenav',{static: false}) public sidenav: MatSidenav;\r\n  // @ViewChild('sidenav', { static: true })public sidenav: MatSidenav;\r\n\r\n\r\n  constructor(protected breakpointObserver: BreakpointObserver) {\r\n   this.openedSubject = new Subject<boolean>();\r\n   //this.SideOpen = false;\r\n   this.MatContentWidth = \"40px\";\r\n   this.MatContentHeight = \"40px\";\r\n   this.MatContainerWidth= \"40px\";\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // this.openedSubject.subscribe(\r\n    //   keepOpen => this.sidenav[keepOpen ? 'open' : 'close']()\r\n    // );\r\n    this.openedSubject.subscribe((result: boolean)=>{\r\n      this.sidenav[result ? 'open': 'close']()\r\n      this.setStyles();\r\n    });\r\n    //console.log(\"Opened Subject: \", this.MatContainerWidth);\r\n  }\r\n\r\n\r\n  public toggleDrawer() {\r\n    this.openedSubject.next(!this.sidenav.opened);\r\n    //so the hamburger menu doesnt come all the way across the screen when closing the menu\r\n    if(!this.sidenav.opened){\r\n    this.MatContentWidth = \"40px\";\r\n    this.MatContainerWidth = \"40px\";\r\n    this.MatContentHeight = \"40px\";\r\n    // console.log(\"sidenav closed\", this.MatContentWidth);\r\n  }\r\n  else{\r\n    this.MatContentWidth = \"0px\";\r\n    this.MatContentHeight = \"100vh\";\r\n    this.MatContainerWidth = \"210px\";\r\n    // console.log(\"sidenav open\", this.MatContentWidth);\r\n\r\n  }\r\n  }\r\n  protected setStyles():void{\r\n    this.MatContentWidth = \"40px\";\r\n    this.MatContainerWidth = \"40px\";\r\n    this.MatContentHeight = \"40px\";\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SideNavComponent } from './controls/side-nav/side-nav.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FathymSharedModule, MaterialModule } from '@lcu-ide/common';\r\nimport { MatSidenavModule, MatIconModule } from '@angular/material';\r\n\r\n@NgModule({\r\n  declarations: [SideNavComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    FathymSharedModule,\r\n    MaterialModule,\r\n    MatSidenavModule,\r\n    MatIconModule\r\n  ],\r\n  exports: [SideNavComponent],\r\n  entryComponents:[SideNavComponent]\r\n})\r\nexport class LcuHamburgerMenuSideNavModule { }\r\n","/**\r\n * Model for naviation link structure\r\n */\r\nexport class NavLinkModel {\r\n\r\n    /**\r\n     * Menu icon\r\n     */\r\n    public Icon?: string;\r\n\r\n    /**\r\n     * Menu label\r\n     */\r\n    public Label: string;\r\n\r\n    /**\r\n     * Menu parameter\r\n     */\r\n    public Param?: string;\r\n\r\n    /**\r\n     * Navigation URL\r\n     */\r\n    public Url: string;\r\n\r\n    /**\r\n     * String value true or false, whether or not to grey out the button\r\n     */\r\n    public Disabled: string;\r\n\r\n    constructor(label: string, Url: string, icon?: string, param?: string, disabled?: string) {\r\n        this.Icon = icon;\r\n        this.Label = label;\r\n        this.Url = Url;\r\n        this.Param = param;\r\n        this.Disabled = disabled;\r\n    }\r\n}"]}