{"version":3,"sources":["ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/controls/side-nav/side-nav.component.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/lcu-hamburger-menu-side-nav.module.ts","ng://@lowcodeunit/lcu-hamburger-menu-side-nav-common/lib/models/nav-link.model.ts"],"names":["SideNavComponent","breakpointObserver","this","isHandset$","observe","Breakpoints","Handset","pipe","map","result","matches","NavItemClicked","EventEmitter","openedSubject","Subject","MatContentWidth","MatContentHeight","MatContainerWidth","prototype","ngOnInit","setDefaultStyles","ngAfterContentInit","_this","subscribe","sidenav","setStyles","ButtonClicked","button","emit","toggleDrawer","next","opened","OnHover","MenuBGColor","HoverMenuColor","OnButtonHover","ButtonHover","LeaveHover","MenuColor","LeaveButtonHover","FontColor","ButtonBackgroundColorHover","ButtonBackgroundColor","ButtonBGColor","Component","args","selector","template","BreakpointObserver","Output","Input","ViewChild","static","LcuHamburgerMenuSideNavModule","NgModule","declarations","imports","CommonModule","FlexLayoutModule","FathymSharedModule","MaterialModule","MatSidenavModule","MatIconModule","exports","entryComponents","label","Url","icon","param","disabled","Icon","Label","Param","Disabled"],"mappings":"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","sourcesContent":["import { Component, Input, ViewChild, Output, EventEmitter } from '@angular/core';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { NavLinkModel } from '../../models/nav-link.model';\r\nimport { MatSidenav } from '@angular/material';\r\n\r\n\r\n@Component({\r\n  selector: 'lcu-side-nav',\r\n  templateUrl: './side-nav.component.html',\r\n  styleUrls: ['./side-nav.component.scss']  \r\n})\r\n\r\nexport class SideNavComponent {\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches)\r\n    );\r\n\r\n  protected _navLinks: Array<NavLinkModel>;\r\n\r\n  @Output('nav-item-clicked')\r\n  public NavItemClicked: EventEmitter<any>;\r\n\r\n  @Input('menu-items')\r\n  public MenuItems: Array<NavLinkModel>;\r\n\r\n  //public openedSubject: Subject<boolean>;\r\n  @Input('opened-subject')\r\n  public openedSubject: Subject<boolean>\r\n\r\n  @Input('menu-color')\r\n  public MenuColor: string;\r\n\r\n  @Input('hover-menu-color')\r\n  public HoverMenuColor: string;\r\n\r\n  @Input('mat-content-width')\r\n  public MatContentWidth: string;\r\n\r\n  @Input('mat-content-height')\r\n  public MatContentHeight: string;\r\n\r\n  @Input('mat-container-width')\r\n  public MatContainerWidth: string;\r\n\r\n  @Input('button-background-color')\r\n  public ButtonBackgroundColor: string;\r\n\r\n  @Input('button-background-color-hover')\r\n  public ButtonBackgroundColorHover:string;\r\n\r\n  @Input('font-color')\r\n  public FontColor: string;\r\n\r\n  public MenuBGColor: string;\r\n  public ButtonBGColor: string;\r\n  public ButtonHover: boolean;\r\n\r\n\r\n  @ViewChild('sidenav', { static: false }) public sidenav: MatSidenav;\r\n\r\n  // public MenuColor: string;\r\n\r\n  constructor(protected breakpointObserver: BreakpointObserver) {\r\n    this.NavItemClicked = new EventEmitter<any>();\r\n    this.openedSubject = new Subject<boolean>();\r\n    this.MatContentWidth = \"50px\";\r\n    this.MatContentHeight = \"40px\";\r\n    this.MatContainerWidth = \"50px\";\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.setDefaultStyles();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.openedSubject.subscribe((result: boolean) => {\r\n      this.sidenav[result ? 'open' : 'close']()\r\n      this.setStyles();\r\n    });\r\n  }\r\n\r\n  public ButtonClicked(button) {\r\n    this.NavItemClicked.emit(button);\r\n  }\r\n\r\n\r\n  public toggleDrawer() {\r\n    this.openedSubject.next(!this.sidenav.opened);\r\n    if (!this.sidenav.opened) {\r\n      this.MatContentWidth = \"50px\";\r\n      this.MatContainerWidth = \"50px\";\r\n      this.MatContentHeight = \"40px\";\r\n      // console.log(\"sidenav closed\", this.MatContentWidth);\r\n    }\r\n    else {\r\n      this.MatContentWidth = \"0px\";\r\n      this.MatContentHeight = \"94vh\";//94vh\r\n      this.MatContainerWidth = \"230px\";\r\n      // console.log(\"sidenav open\", this.MatContentWidth);\r\n\r\n    }\r\n  }\r\n  public OnHover(): void {\r\n    this.MenuBGColor = this.HoverMenuColor;\r\n  }\r\n\r\n  public OnButtonHover():void{\r\n    // this.ButtonBGColor = this.ButtonBackgroundColorHover;\r\n    this.ButtonHover = true;\r\n  }\r\n\r\n  public LeaveHover(): void {\r\n    this.MenuBGColor = this.MenuColor;\r\n  }\r\n\r\n  public LeaveButtonHover():void{\r\n    // this.ButtonBGColor = this.ButtonBackgroundColor;\r\n    this.ButtonHover = false;\r\n  }\r\n\r\n  // public setButtonStyles() {\r\n  //   let styles = {\r\n  //     'background-color': this.ButtonHover ? this.ButtonBackgroundColorHover : this.ButtonBackgroundColor\r\n  //   };\r\n  //   return styles;\r\n  // }\r\n  protected setStyles(): void {\r\n    this.MatContentWidth = \"50px\";\r\n    this.MatContainerWidth = \"50px\";\r\n    this.MatContentHeight = \"40px\";\r\n  }\r\n\r\n  protected setDefaultStyles(): void {\r\n    this.setStyles();\r\n\r\n    if(!this.FontColor){\r\n      this.FontColor = 'black';\r\n    }\r\n\r\n    if(!this.ButtonBackgroundColorHover){\r\n      this.ButtonBackgroundColorHover = \"grey\"//#96957\r\n    }\r\n    if(!this.ButtonBackgroundColor){\r\n      this.ButtonBGColor = \"white\"//#96957\r\n    }\r\n\r\n    if (!this.MenuColor) {\r\n      this.MenuBGColor = 'black';\r\n    }\r\n    this.MenuBGColor = this.MenuColor;\r\n    if (!this.HoverMenuColor) {\r\n      this.HoverMenuColor = 'grey';\r\n    }\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SideNavComponent } from './controls/side-nav/side-nav.component';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { FathymSharedModule, MaterialModule } from '@lcu/common';\r\nimport { MatSidenavModule, MatIconModule } from '@angular/material';\r\n\r\n@NgModule({\r\n  declarations: [SideNavComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FlexLayoutModule,\r\n    FathymSharedModule,\r\n    MaterialModule,\r\n    MatSidenavModule,\r\n    MatIconModule\r\n  ],\r\n  exports: [SideNavComponent],\r\n  entryComponents:[SideNavComponent]\r\n})\r\nexport class LcuHamburgerMenuSideNavModule { }\r\n","/**\r\n * Model for naviation link structure\r\n */\r\nexport class NavLinkModel {\r\n\r\n    /**\r\n     * Menu icon\r\n     */\r\n    public Icon?: string;\r\n\r\n    /**\r\n     * Menu label\r\n     */\r\n    public Label: string;\r\n\r\n    /**\r\n     * Menu parameter\r\n     */\r\n    public Param?: string;\r\n\r\n    /**\r\n     * Navigation URL\r\n     */\r\n    public Url: string;\r\n\r\n    /**\r\n     * String value true or false, whether or not to grey out the button\r\n     */\r\n    public Disabled: string;\r\n\r\n    constructor(label: string, Url: string, icon?: string, param?: string, disabled?: string) {\r\n        this.Icon = icon;\r\n        this.Label = label;\r\n        this.Url = Url;\r\n        this.Param = param;\r\n        this.Disabled = disabled;\r\n    }\r\n}"]}